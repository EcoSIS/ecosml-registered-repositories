[
  {
    "_id": "5bf08ece1948423de6907799",
    "name": "ucd-library/crowd-source-js",
    "overview": "JS library for interacting with UCD library crowd source databases. Including crowd-source-db (PGR/Postgres), Firestore and UCD FIN/DAMS",
    "organization": "cstars",
    "language": "other",
    "packageType": "standalone",
    "owner": "jrmerz",
    "id": "9d74b27c-67cf-4b2f-bef4-495fea55c140",
    "description": "# crowd-source-js\nJS library for interacting with UCD library crowd source databases.  Including crowd-source-db (PGR/Postgres), Firestore and UCD FIN/DAMS\n\n# Overview\n\n![crowd-source-js overview](./docs/crowd-source-js-overview.png)\n\n# Method Overview\n\n## Crowd Inputs\n- get approved by item (PGR)\n  - gets all approved inputs for item\n  - will trigger update events for individual inputs and item\n- get approved by id (PGR)\n- set approved (PGR/Firestore)\n  - add input to pgr, remove from firestore\n- add pending (Firestore)\n  - add pending input to firestore\n- remove pending (Firestore)\n  - remove a pending crowd input.  \n  - Must be admin or owned by user\n- update pending (Firestore)\n  - update a pending crowd input.  \n  - Must be admin or owned by user\n- get pending (Firestore)\n- get pending by item (Firestore)\n  - get all pending inputs for item\n  - will trigger update events for individual inputs and item\n- listen pending by item (Firestore)\n  - get pushed updates of all inputs for item\n  - will trigger update events for individual inputs and item\n  - if input is deleted, will check if it was approved.  Fires approved update event if it was \n- unlisten pending by item (Firestores)\n  - stop listing to push update of inputs for item\n\n## Items\n- get by id (ElasticSearch)\n- search (ElasticSearch)\n  - supports text, filters, limit, offsets, etc\n- get crowd info (PGR)\n  - get crowd information for item, ex: editable, completed\n- get crowd child stats (PGR)\n  - given a item id, get summary of crowd info for all child items\n\n# Authentication\n\n## crowd-source-db (PostgREST/PostreSQL)\n\nPostgREST authenticates via a Bearer JWT token in the Authorization header.  Methods that require authentication (currently the CrowdSourceModel.setApproved() ) require the JWT when called.  The JWT should have the following payload:\n\n```js\n{\n  username : '',\n  role : ''\n}\n```\n\nWhere role is empty or 'admin'.  JWTs can be minted for PGR using the jsonwebtoken library.\n\n```js\nconst jwt = require('jsonwebtoken');\nlet token = jwt.sign({username, role}, 'secret');\n```\n\n## Firestore\n\nFirebase has several authentication methods but the JWT token method is recommended.  The payload for the token should include the email and isAdmin flag.\n\n```js\n{\n  email : '', \n  isAdmin : false\n}\n```\n\nYou should use the firebase-admin library with a Google/Firebase Service Account to mint the tokens.  Once firebase is authenticated with the token, no further action is required.\n\n```js\nconst admin = require('firebase-admin');\nconst serviceAccount = require('./service-account.json');\n\n(async function() {\n  admin.initializeApp({\n    credential : admin.credential.cert(serviceAccount)\n  });\n\n  let token = await admin.auth().createCustomToken(\n    userId,\n    {email, isAdmin}\n  );\n})();\n```\n\n## FIN / DAMS\n\nThe DAMS Elastic Search API is public and does not require authentication.",
    "family": [],
    "keywords": [],
    "releaseCount": 0,
    "releases": [],
    "source": "registered",
    "specific": [],
    "theme": []
  }
]